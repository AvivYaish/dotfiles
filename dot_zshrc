# Apps
# Editor: nvim
# Shell: zsh
# Shell styling: oh-my-zsh, oh-my-posh, powerlevel10k
# Terminal multiplexer: byobu
# Dotfile tracking: chezmoi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# I put local programs in .local/bin
local_bin=~/.local/bin
export PATH=${local_bin}:$PATH
if [ ! -d ${local_bin} ]; then
  mkdir -p ${local_bin}
fi

# Install necessary applications
if ! test -f ${local_bin}/antigen.zsh; then
  curl -L git.io/antigen > ${local_bin}/antigen.zsh
fi

source ${local_bin}/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle python
antigen bundle pip
antigen bundle npm
antigen bundle command-not-found
if [[ `uname` == "Darwin" ]]; then
  antigen bundle macos
fi

# Bundles from other repos
antigen bundle marlonrichert/zsh-autocomplete@main
antigen bundle zsh-users/zsh-syntax-highlighting

# Load the theme.
antigen theme romkatv/powerlevel10k

# Tell Antigen that you're done.
antigen apply

# Temp dir, in case we need it
temp_dir="temp_$(date +%s)"
while [ -d ${temp_dir} ]; do
  temp_dir="temp_$(date +%s)"
done

if [[ `uname` == "Darwin" ]]; then
  if command -v ${local_bin}/homebrew/bin/brew &> /dev/null; then
    export PATH=${local_bin}/homebrew/bin:$PATH
  fi
  if ! command -v brew &> /dev/null; then
    git clone https://github.com/Homebrew/brew ${local_bin}/homebrew
    eval "$(${local_bin}/homebrew/bin/brew shellenv)"
    brew update --force --quiet
    chmod -R go-w "$(brew --prefix)/share/zsh"
  fi
  if ! command -v node &> /dev/null; then
    brew install node
  fi
  if ! command -v fzf &> /dev/null; then
    brew install fzf
    # To install useful key bindings and fuzzy completion:
    # $(brew --prefix)/opt/fzf/install
  fi
  if ! command -v nvim &> /dev/null; then
    brew install neovim
  fi
  if ! command -v byobu &> /dev/null; then
    brew install byobu
  fi
  if command -v ${local_bin}/homebrew/bin/byobu &> /dev/null; then
    export BYOBU_PREFIX=${local_bin}/homebrew
  fi
fi

if [[ `uname` == "Linux" ]]; then
  if ! command -v fzf &> /dev/null; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ${local_bin}/fzf
    ${local_bin}/fzf/install
  fi
  if command -v ${local_bin}/fzf/bin/fzf &> /dev/null; then
    export PATH=${local_bin}/fzf/bin:$PATH
  fi

  # Currently assumes you are using Linux on x64
  if ! command -v nvim &> /dev/null; then
    if ! command -v nvim.appimage &> /dev/null; then
      echo "Installing NeoVIM"
      curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
      mv -f nvim.appimage ${local_bin}/
    fi
    if command -v nvim.appimage &> /dev/null; then
      alias nvim="nvim.appimage"
    fi
  fi

  # Node is required by nvim-coc, a plugin for programming language server protocols (for autocompletions, etc')
  if ! command -v node &> /dev/null; then
    if ! command -v ${local_bin}/node/bin/node &> /dev/null; then
      echo "Installing NodeJS"
      curl https://nodejs.org/dist/latest/node-v17.2.0-linux-x64.tar.gz --output node.tar.gz
      mkdir $temp_dir
      tar --no-overwrite-dir -mzxvf node.tar.gz -C $temp_dir
      mv -f $temp_dir/node* ${local_bin}/node
      rm -rf $temp_dir node.tar.gz
    fi
  fi
  if command -v ${local_bin}/node/bin/node &> /dev/null; then
    export PATH=${local_bin}/node/bin:$PATH
    alias node="${local_bin}/node/bin/node"
  fi
  
  if ! command -v byobu &> /dev/null; then
    if ! command -v ${local_bin}/byobu/bin/byobu &> /dev/null; then
      echo "Installing byobu"
      curl https://launchpad.net/byobu/trunk/5.133/+download/byobu_5.133.orig.tar.gz --output byobu.tar.gz
      mkdir $temp_dir
      tar --no-overwrite-dir -mzxvf byobu.tar.gz -C $temp_dir
      cd $temp_dir
      ./configure --prefix="${local_bin}/byobu"
      make
      make install
      cd ~
      rm -rf $temp_dir byobu.tar.gz
    fi
  fi
  if command -v ${local_bin}/byobu/bin/byobu &> /dev/null; then
    export PATH=${local_bin}/byobu/bin:$PATH
  fi
  
# Some byobu versions have a problem when installing from source https://bugs.launchpad.net/byobu/+bug/1025998
# Edit byobu-janitor: vim ${local_bin}/byobu-janitor
# Replace this:

# if ! grep -qs "^screen_upper_left=" "$BYOBU_CONFIG_DIR/status"; then
#     rm -f "$BYOBU_CONFIG_DIR/status" "$BYOBU_CONFIG_DIR/statusrc"
# fi

# with

# if [ -f "$BYOBU_CONFIG_DIR/status" ]; then
#   if ! grep -qs "^screen_upper_left=" "$BYOBU_CONFIG_DIR/status"; then
#     rm -f "$BYOBU_CONFIG_DIR/status" "$BYOBU_CONFIG_DIR/statusrc"
#   fi
# fi

# Try running: byobu-config
# If "snack" is missing, install: conda install -c conda-forge newt

# If you don't have anaconda:
# Install pyenv from source for HUJI: https://github.com/pyenv/pyenv-installer
# Then install some python interpreter: pyenv install miniconda3-latest
# Then use it: pyenv global miniconda3-latest
# Also for python2: pyenv install miniconda2-latest ; pyenv global miniconda2-latest

# TmuxPluginManager requires a .tmux.conf at the root, run: ln -s ${local_bin}/byobu/share/byobu/.tmux.conf .
fi

if command -v pyenv &> /dev/null; then
  # Correctly setting pyenv's python on HUJI's computers
  # export PATH=$HOME/.pyenv/bin:$PATH
  eval "$(pyenv init --path)"
fi

# nvim
alias vim="nvim"
alias vimdiff="nvim -d"

if command -v fzf &> /dev/null; then
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
fi
