# Apps
# Editor: nvim
# Shell: zsh
# Shell styling: oh-my-zsh, oh-my-posh, powerlevel10k
# Terminal multiplexer: byobu
# Dotfile tracking: chezmoi
if [[ `uname` == "Linux" ]]; then
  export FPATH=/usr/local/share/zsh/site-functions:/usr/share/zsh/vendor-functions:/usr/share/zsh/vendor-completions:/usr/share/zsh/functions/Calendar:/usr/share/zsh/functions/Chpwd:/usr/share/zsh/functions/Completion:/usr/share/zsh/functions/Completion/AIX:/usr/share/zsh/functions/Completion/BSD:/usr/share/zsh/functions/Completion/Base:/usr/share/zsh/functions/Completion/Cygwin:/usr/share/zsh/functions/Completion/Darwin:/usr/share/zsh/functions/Completion/Debian:/usr/share/zsh/functions/Completion/Linux:/usr/share/zsh/functions/Completion/Mandriva:/usr/share/zsh/functions/Completion/Redhat:/usr/share/zsh/functions/Completion/Solaris:/usr/share/zsh/functions/Completion/Unix:/usr/share/zsh/functions/Completion/X:/usr/share/zsh/functions/Completion/Zsh:/usr/share/zsh/functions/Completion/openSUSE:/usr/share/zsh/functions/Exceptions:/usr/share/zsh/functions/MIME:/usr/share/zsh/functions/Math:/usr/share/zsh/functions/Misc:/usr/share/zsh/functions/Newuser:/usr/share/zsh/functions/Prompts:/usr/share/zsh/functions/TCP:/usr/share/zsh/functions/VCS_Info:/usr/share/zsh/functions/VCS_Info/Backends:/usr/share/zsh/functions/Zftp:/usr/share/zsh/functions/Zle:$FPATH
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# I put local programs in .local/bin
local_bin=~/.local/bin
export PATH=${local_bin}:$PATH
if [ ! -d ${local_bin} ]; then
  mkdir -p ${local_bin}
fi

# Install necessary applications
if ! test -f ${local_bin}/antigen.zsh; then
  curl -L git.io/antigen > ${local_bin}/antigen.zsh
fi

source ${local_bin}/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle command-not-found
antigen bundle git
antigen bundle python
antigen bundle pip
antigen bundle npm
if command -v ${local_bin}/homebrew/bin/fzf &> /dev/null; then
  export FZF_BASE=${local_bin}/homebrew/opt/fzf
  export PATH=${local_bin}/homebrew/opt/fzf:$PATH
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
antigen bundle fzf
if [[ `uname` == "Darwin" ]]; then
  antigen bundle macos
fi
# Bundles from other repos
antigen bundle marlonrichert/zsh-autocomplete@main
antigen bundle zsh-users/zsh-syntax-highlighting

antigen theme romkatv/powerlevel10k     # Load the theme.
antigen apply   # Tell Antigen that you're done.

if command -v ${local_bin}/homebrew/bin/brew &> /dev/null; then
  export PATH=${local_bin}/homebrew/bin:$PATH
fi
if ! command -v brew &> /dev/null; then
  git clone https://github.com/Homebrew/brew ${local_bin}/homebrew
  eval "$(${local_bin}/homebrew/bin/brew shellenv)"
  brew update --force --quiet
  chmod -R go-w "$(brew --prefix)/share/zsh"
  brew analytics off
fi

# bat is a modern 'cat' replacement, has a nice OneHalfDark syntax highlighting theme.
# lsd is a nicer 'ls'.
# To install useful key bindings and fuzzy completion for FZF: $(brew --prefix)/opt/fzf/install
for app in chezmoi rs/tap/curlie bat lsd git-delta ripgrep universal-ctags tealdeer fd nvm byobu fzf; do
  case ${app} in
    rs/tap/curlie)      appCommand="curlie";; # A curl front-end inspired by HTTPie
    git-delta)          appCommand="delta";;  # Snazzier 'diff', with One Half Dark support
    universal-ctags)    appCommand="ctags";;  # If your ctags is outdated, this is required for VIM's tagbar
    ripgrep)            appCommand="rg";;     # Faster, better 'grep'!
    tealdeer)           appCommand="tldr";;   # A good companion for 'man', with succint descriptions and useful examples
    nvm)                appCommand="${local_bin}/homebrew/opt/nvm/nvm-exec";; # nvm is used to install node, which is required by nvim-coc, a plugin for programming language server protocols (for autocompletions, etc').
    *)                  appCommand=${app};;
  esac
  if ! command -v ${appCommand} &> /dev/null; then
    brew install ${app}
  fi
done
if command -v ${local_bin}/homebrew/bin/byobu &> /dev/null; then
  export BYOBU_PREFIX=${local_bin}/homebrew
  [[ $(diff ~/.tmux.conf ~/.byobu/.tmux.conf) ]] && cp .tmux.conf .byobu/.tmux.conf  # if your .tmux.conf file is not in the correct place
fi
if command -v ${local_bin}/homebrew/opt/nvm/nvm-exec &> /dev/null; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "${local_bin}/homebrew/opt/nvm/nvm.sh" ] && \. "${local_bin}/homebrew/opt/nvm/nvm.sh"  # load nvm
  [ -s "${local_bin}/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "${local_bin}/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # load nvm bash_completion
fi

if [[ `uname` == "Linux" ]]; then
  if ! command -v nvim &> /dev/null; then
    if ! command -v nvim.appimage &> /dev/null; then # Currently assumes you are using Linux on x64
      echo "Installing NeoVIM"
      curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
      mv -f nvim.appimage ${local_bin}/
    fi
    if command -v nvim.appimage &> /dev/null; then
      alias nvim="nvim.appimage"
      alias vim="nvim"
      alias vimdiff="nvim -d"
    fi
  fi
fi

alias ll="lsd -lhat"
alias dif="delta -ns"
